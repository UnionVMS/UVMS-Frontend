{"version":3,"sources":["angular-localization.js"],"names":["angular","window","document","undefined","module","constant","value","en","service","$injector","$http","$q","$log","$rootScope","$window","localeConf","localeEvents","localeSupported","localeFallbacks","isToken","str","length","TOKEN_REGEX","test","getPath","tok","path","split","result","slice","join","getKey","getBundle","i","bundles","isFrozen","obj","Object","$$frozen","freeze","replaceAll","substr","sub","replace","RegExp","loadBundle","token","parent","ref","root","locale","currentLocale","url","basePath","extend","_loading","fileExtension","get","success","data","key","hasOwnProperty","$broadcast","resourceUpdates","bundle","deferrences","resolve","error","err","reject","bundleReady","langFile","defer","promise","ready","paths","deferred","outstanding","isString","isArray","Error","forEach","push","all","applySubstitutions","text","subs","res","firstOfKind","v","k","getLocalizedString","txt","A","isValidToken","indexOf","delimiter","fromJson","isObject","info","updateHtmlTagLangAttr","lang","$html","attr","getLanguageSupported","language","foundLanguage","languageSuppported","fallbackLang","isUndefined","defaultLocale","setLocale","trim","localeChanges","cookieStore","put","cookieName","getLocale","getPreferredBrowserLanguage","nav","navigator","browserLanguagePropertyKeys","languages","initialSetLocale","validTokens","element","body","persistSelection","has","getString","filter","i18nFilter","input","args","$stateful","directive","$sce","setText","elm","tag","html","getTrustedHtml","update","string","optArgs","then","scope","attrs","hasObservers","$observe","newVal","oldVal","$attr","normAttr","observableAttrs","i18n","$on","setAttr","$attrs","$set","$normalize","getUpdateText","$scope","target","lastValues","attributes","exp","values","$eval","langFiles","priority","compile","$elem","i18nAttr","updateText","sharedDictionary","this"],"mappings":"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","file":"angular-localization.min.js","sourcesContent":["/*!\n * angular-localization :: v1.5.1 :: 2016-05-05\n * web: http://doshprompt.github.io/angular-localization\n *\n * Copyright (c) 2016 | Rahul Doshi\n * License: MIT\n */\n;(function (angular, window, document, undefined) {\n    'use strict';\n\nangular.module('ngLocalize.Version', [])\n    .constant('localeVer', '1.5.1');\nangular.module('ngLocalize', ['ngSanitize', 'ngLocalize.Config', 'ngLocalize.Events', 'ngLocalize.InstalledLanguages']);\n\nangular.module('ngLocalize.InstalledLanguages', [])\n    .value('localeSupported', [\n        'en-US'\n    ])\n    .value('localeFallbacks', {\n        'en': 'en-US'\n    });\nangular.module('ngLocalize')\n    .service('locale', function ($injector, $http, $q, $log, $rootScope, $window, localeConf, localeEvents, localeSupported, localeFallbacks) {\n        var TOKEN_REGEX = localeConf.validTokens || new RegExp('^[\\\\w\\\\.-]+\\\\.[\\\\w\\\\s\\\\.-]+\\\\w(:.*)?$'),\n            $html = angular.element(document.body).parent(),\n            currentLocale,\n            deferrences,\n            bundles,\n            cookieStore;\n\n        if (localeConf.persistSelection && $injector.has('$cookieStore')) {\n            cookieStore = $injector.get('$cookieStore');\n        }\n\n        function isToken(str) {\n            return (str && str.length && TOKEN_REGEX.test(str));\n        }\n\n        function getPath(tok) {\n            var path = tok ? tok.split('.') : '',\n                result = '';\n\n            if (path.length > 1) {\n                result = path.slice(0, -1).join('.');\n            }\n\n            return result;\n        }\n\n        function getKey(tok) {\n            var path = tok ? tok.split('.') : [],\n                result = '';\n\n            if (path.length) {\n                result = path[path.length - 1];\n            }\n\n            return result;\n        }\n\n        function getBundle(tok) {\n            var result = null,\n                path = tok ? tok.split('.') : [],\n                i;\n\n            if (path.length > 1) {\n                result = bundles;\n\n                for (i = 0; i < path.length - 1; i++) {\n                    if (result[path[i]]) {\n                        result = result[path[i]];\n                    } else {\n                        result = null;\n                        break;\n                    }\n                }\n            }\n\n            return result;\n        }\n\n        function isFrozen (obj) {\n            return (Object.isFrozen || function (obj) {\n                return obj && obj.$$frozen;\n            })(obj);\n        }\n\n        function freeze (obj) {\n            return (Object.freeze || function (obj) {\n                if (obj) {\n                    obj.$$frozen = true;\n                }\n            })(obj);\n        }\n\n        // http://stackoverflow.com/a/17606289\n        function replaceAll(str, substr, sub) {\n            return str.replace(new RegExp(substr.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'), 'g'), sub);\n        }\n\n        function loadBundle(token) {\n            var path = token ? token.split('.') : '',\n                root = bundles,\n                parent,\n                locale = currentLocale,\n                url = localeConf.basePath + '/' + locale,\n                ref,\n                i;\n\n            if (path.length > 1) {\n                for (i = 0; i < path.length - 1; i++) {\n                    ref = path[i];\n                    if (!root[ref]) {\n                        root[ref] = {};\n                    }\n                    parent = root;\n                    root = root[ref];\n                    url += '/' + ref;\n                }\n\n                if (isFrozen(root)) {\n                    root = angular.extend({}, root);\n                }\n                if (!root._loading) {\n                    root._loading = true;\n\n                    url += localeConf.fileExtension;\n\n                    $http.get(url)\n                        .success(function (data) {\n                            var key,\n                                path = getPath(token);\n                            // Merge the contents of the obtained data into the stored bundle.\n                            for (key in data) {\n                                if (data.hasOwnProperty(key)) {\n                                    root[key] = data[key];\n                                }\n                            }\n\n                            // Mark the bundle as having been \"loaded\".\n                            delete root._loading;\n                            parent[ref] = freeze(root);\n                            root = null;\n\n                            // Notify anyone who cares to know about this event.\n                            $rootScope.$broadcast(localeEvents.resourceUpdates, {\n                                locale: locale,\n                                path: path,\n                                bundle: parent[ref]\n                            });\n\n                            // If we issued a Promise for this file, resolve it now.\n                            if (deferrences[path]) {\n                                deferrences[path].resolve(path);\n                            }\n                        })\n                        .error(function (err) {\n                            var path = getPath(token);\n\n                            $log.error('[localizationService] Failed to load: ' + url);\n\n                            // We can try it again later.\n                            delete root._loading;\n\n                            // If we issued a Promise for this file, reject it now.\n                            if (deferrences[path]) {\n                                deferrences[path].reject(err);\n                            }\n                        });\n                }\n            }\n        }\n\n        function bundleReady(path) {\n            var bundle,\n                token;\n\n            path = path || localeConf.langFile;\n            token = path + '._LOOKUP_';\n\n            bundle = getBundle(token);\n\n            if (!deferrences[path]) {\n                deferrences[path] = $q.defer();\n            }\n\n            if (bundle && !bundle._loading) {\n                deferrences[path].resolve(path);\n            } else {\n                if (!bundle) {\n                    loadBundle(token);\n                }\n            }\n\n            return deferrences[path].promise;\n        }\n\n        function ready(path) {\n            var paths,\n                deferred,\n                outstanding;\n\n            if (angular.isString(path)) {\n                paths = path.split(',');\n            } else if (angular.isArray(path)) {\n                paths = path;\n            } else {\n                throw new Error('locale.ready requires either an Array or comma-separated list.');\n            }\n\n            if (paths.length > 1) {\n                outstanding = [];\n                paths.forEach(function (path) {\n                    outstanding.push(bundleReady(path));\n                });\n                deferred = $q.all(outstanding);\n            } else {\n                deferred = bundleReady(path);\n            }\n\n            return deferred;\n        }\n\n        function applySubstitutions(text, subs) {\n            var res = text,\n                firstOfKind = 0;\n\n            if (subs) {\n                if (angular.isArray(subs)) {\n                    angular.forEach(subs, function (sub, i) {\n                        res = replaceAll(res, '%' + (i + 1), sub);\n                        res = replaceAll(res, '{' + (i + 1) + '}', sub);\n                    });\n                } else {\n                    angular.forEach(subs, function (v, k) {\n                        ++firstOfKind;\n\n                        res = replaceAll(res, '{' + k + '}', v);\n                        res = replaceAll(res, '%' + k, v);\n                        res = replaceAll(res, '%' + (firstOfKind), v);\n                        res = replaceAll(res, '{' + (firstOfKind) + '}', v);\n                    });\n                }\n            }\n            res = res.replace(/\\n/g, '<br>');\n\n            return res;\n        }\n\n        function getLocalizedString(txt, subs) {\n            var result = '',\n                bundle,\n                key,\n                A,\n                isValidToken = false;\n\n            if (angular.isString(txt) && !subs && txt.indexOf(localeConf.delimiter) !== -1) {\n                A = txt.split(localeConf.delimiter);\n                txt = A[0];\n                subs = angular.fromJson(A[1]);\n            }\n\n            isValidToken = isToken(txt);\n            if (isValidToken) {\n                if (!angular.isObject(subs)) {\n                    subs = [subs];\n                }\n\n                bundle = getBundle(txt);\n                if (bundle && !bundle._loading) {\n                    key = getKey(txt);\n\n                    if (bundle[key]) {\n                        result = applySubstitutions(bundle[key], subs);\n                    } else {\n                        $log.info('[localizationService] Key not found: ' + txt);\n                        result = '%%KEY_NOT_FOUND%%';\n                    }\n                } else {\n                    if (!bundle) {\n                        loadBundle(txt);\n                    }\n                }\n            } else {\n                result = txt;\n            }\n\n            return result;\n        }\n\n        function updateHtmlTagLangAttr(lang) {\n            lang = lang.split('-')[0];\n\n            $html.attr('lang', lang);\n        }\n\n        function getLanguageSupported(language) {\n            var foundLanguage = null;\n            if (language && language.length) {\n                localeSupported.forEach(function (languageSuppported) {\n                    if (languageSuppported.indexOf(language) === 0) {\n                        foundLanguage = languageSuppported;\n                        return;\n                    }\n                });\n                if (!foundLanguage) {\n                    var fallbackLang = localeFallbacks[language.split('-')[0]];\n                    if (!angular.isUndefined(fallbackLang)) {\n                      foundLanguage = fallbackLang;\n                    }\n                }\n            }\n            return foundLanguage || localeConf.defaultLocale;\n        }\n\n        function setLocale(value) {\n            var lang;\n\n            if (angular.isString(value) && value.length ) {\n                value = value.trim();\n                lang = getLanguageSupported(value);\n            } else {\n                lang = localeConf.defaultLocale;\n            }\n\n            if (lang !== currentLocale) {\n                bundles = {};\n                deferrences = {};\n                currentLocale = lang;\n\n                updateHtmlTagLangAttr(lang);\n\n                $rootScope.$broadcast(localeEvents.localeChanges, currentLocale);\n\n                if (cookieStore) {\n                    cookieStore.put(localeConf.cookieName, lang);\n                }\n            }\n        }\n\n        function getLocale() {\n            return currentLocale;\n        }\n\n        function getPreferredBrowserLanguage() {\n            var nav = $window.navigator,\n                browserLanguagePropertyKeys = ['language', 'browserLanguage', 'systemLanguage', 'userLanguage'],\n                i,\n                language;\n\n            // support for HTML 5.1 \"navigator.languages\"\n            if (angular.isArray(nav.languages)) {\n                for (i = 0; i < nav.languages.length; i++) {\n                    language = nav.languages[i];\n                    if (language) {\n                        return language;\n                    }\n                }\n            }\n            // support for other well known properties in browsers\n            for (i = 0; i < browserLanguagePropertyKeys.length; i++) {\n                language = nav[browserLanguagePropertyKeys[i]];\n                if (language) {\n                    return language;\n                }\n            }\n\n            return null;\n        }\n\n        function initialSetLocale() {\n            setLocale(cookieStore && cookieStore.get(localeConf.cookieName) ?\n                cookieStore.get(localeConf.cookieName) :\n                getPreferredBrowserLanguage());\n        }\n\n        initialSetLocale();\n\n        return {\n            ready: ready,\n            isToken: isToken,\n            getPath: getPath,\n            getKey: getKey,\n            setLocale: setLocale,\n            getLocale: getLocale,\n            getString: getLocalizedString,\n            getPreferredBrowserLanguage: getPreferredBrowserLanguage\n        };\n    });\n\nangular.module('ngLocalize')\n    .filter('i18n', function (locale) {\n        var i18nFilter = function (input, args) {\n            return locale.getString(input, args);\n        };\n\n        i18nFilter.$stateful = true;\n\n        return i18nFilter;\n    });\n\nangular.module('ngLocalize.Events', [])\n    .constant('localeEvents', {\n        resourceUpdates: 'ngLocalizeResourcesUpdated',\n        localeChanges: 'ngLocalizeLocaleChanged'\n    });\nangular.module('ngLocalize')\n    .directive('i18n', function ($sce, locale, localeEvents, localeConf) {\n        function setText(elm, tag) {\n            if (tag !== elm.html()) {\n                elm.html($sce.getTrustedHtml(tag));\n            }\n        }\n\n        function update(elm, string, optArgs) {\n            if (locale.isToken(string)) {\n                locale.ready(locale.getPath(string)).then(function () {\n                    setText(elm, locale.getString(string, optArgs));\n                });\n            } else {\n                setText(elm, string);\n            }\n        }\n\n        return function (scope, elm, attrs) {\n            var hasObservers;\n\n            attrs.$observe('i18n', function (newVal, oldVal) {\n                if (newVal && newVal !== oldVal) {\n                    update(elm, newVal, hasObservers);\n                }\n            });\n\n            angular.forEach(attrs.$attr, function (attr, normAttr) {\n                if (localeConf.observableAttrs.test(attr)) {\n                    attrs.$observe(normAttr, function (newVal) {\n                        if (newVal || !hasObservers || !hasObservers[normAttr]) {\n                            hasObservers = hasObservers || {};\n                            hasObservers[normAttr] = attrs[normAttr];\n                            update(elm, attrs.i18n, hasObservers);\n                        }\n                    });\n                }\n            });\n\n            scope.$on(localeEvents.resourceUpdates, function () {\n                update(elm, attrs.i18n, hasObservers);\n            });\n            scope.$on(localeEvents.localeChanges, function () {\n                update(elm, attrs.i18n, hasObservers);\n            });\n        };\n    })\n    .directive('i18nAttr', function ($rootScope, locale, localeEvents) {\n        function setAttr ($attrs, key, value) {\n            $attrs.$set($attrs.$normalize(key), value);\n        }\n\n        function getUpdateText ($scope, target, $attrs) {\n            var lastValues = {};\n            return function (attributes) {\n                var values = $scope.$eval(attributes),\n                    langFiles = [],\n                    exp;\n\n                for(var key in values) {\n                    exp = values[key];\n                    if (locale.isToken(exp) && langFiles.indexOf(locale.getPath(exp)) === -1) {\n                        langFiles.push(locale.getPath(exp));\n                    }\n                }\n\n                locale.ready(langFiles).then(function () {\n                    var value = '';\n                    for(var key in values) {\n                        exp = values[key];\n                        value = locale.getString(exp);\n                        if (lastValues[key] !== value) {\n                            lastValues[key] = value;\n                            setAttr($attrs, key, value);\n                        }\n                    }\n                });\n            };\n        }\n\n        return {\n            // ensure has higher priority than ngAria\n            priority: 1000,\n            compile: function ($elem, $attrs) {\n                angular.forEach($rootScope.$eval($attrs.i18nAttr), function (value, key) {\n                    // temporarily populate attribute\n                    // avoid false positive warning about aria-label\n                    setAttr($attrs, key, value || '...');\n                });\n\n                return function ($scope, $elem, $attrs) {\n                    var updateText = getUpdateText($scope, $elem, $attrs);\n\n                    $attrs.$observe('i18nAttr', function (newVal) {\n                        if (newVal) {\n                            updateText(newVal);\n                        }\n                    });\n\n                    $scope.$on(localeEvents.resourceUpdates, function () {\n                        updateText($attrs.i18nAttr);\n                    });\n\n                    $scope.$on(localeEvents.localeChanges, function () {\n                        updateText($attrs.i18nAttr);\n                    });\n                };\n            }\n        };\n    });\n\nangular.module('ngLocalize.Config', [])\n    .value('localeConf', {\n        basePath: 'languages',\n        defaultLocale: 'en-US',\n        sharedDictionary: 'common',\n        fileExtension: '.lang.json',\n        persistSelection: true,\n        cookieName: 'COOKIE_LOCALE_LANG',\n        observableAttrs: new RegExp('^data-(?!ng-|i18n)'),\n        delimiter: '::',\n        validTokens: new RegExp('^[\\\\w\\\\.-]+\\\\.[\\\\w\\\\s\\\\.-]+\\\\w(:.*)?$')\n    });\n\n}(this.angular, this, this.document));\n"],"sourceRoot":"/source/"}