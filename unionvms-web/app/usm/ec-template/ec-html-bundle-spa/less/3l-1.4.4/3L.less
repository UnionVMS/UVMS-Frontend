/*
﻿Developed with the contribution of the European Commission - Directorate General for Maritime Affairs and Fisheries
© European Union, 2015-2016.

This file is part of the Integrated Fisheries Data Management (IFDM) Suite. The IFDM Suite is free software: you can
redistribute it and/or modify it under the terms of the GNU General Public License as published by the
Free Software Foundation, either version 3 of the License, or any later version. The IFDM Suite is distributed in
the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details. You should have received a
copy of the GNU General Public License along with the IFDM Suite. If not, see <http://www.gnu.org/licenses/>.
 */
// SEO helpers, reset, and boilerplate are removed, as well as extra comments:

///**
// * Some other helper classes.
// **/
.incomplete() {outline: 3px dotted green}
.fixme() {outline: 3px dotted yellow}
.todo() {outline: 3px dotted blue}
.xxx() {outline: 3px dotted red}

///**
// * Font-face
// * 
// * Easily include fonts on you website.
// *
// * @USAGE
// * Put the .font-face() mixin in your CSS. Provide at least two arguments:
// * -- font's name (string),
// * -- font's filename (without filetype),
// * -- font's path / URL (string) [don't forget to put the fonts in all formats in the folder].
// *
// * Optionally you can provide the font's weight and style. By default they're normal.
// *
// * Font's formats you need to use: EOT, WOFF, TTF and SVG.
// **/

.font-face(@name, @filename, @path, @weight:normal, @style:normal) {
	@font-face {
		font-family: @name;
		src: url('@{path}@{filename}.eot');
		src: local('☺'), url('@{path}@{filename}.woff') format('woff'), url('@{path}@{filename}.ttf') format('truetype'), url('@{path}@{filename}.svg') format('svg');
		font-weight: @weight;
		font-style: @style;
	}
}

.content-box-sizing(){-moz-box-sizing:content-box;-webkit-box-sizing:content-box;box-sizing:content-box;}
.padding-box-sizing(){-moz-box-sizing:padding-box;}
.border-box-sizing(){-moz-box-sizing:border-box;-webkit-box-sizing:border-box;box-sizing:border-box;}
.box-sizing (padding){.padding-box-sizing;}
.box-sizing (padding-box){.padding-box-sizing;}
.box-sizing (border){.border-box-sizing;}
.box-sizing (border-box){.border-box-sizing;}
.box-sizing (content){.content-box-sizing;}
.box-sizing (content-box){.content-box-sizing;}


.content-box(){-moz-background-clip:content;background-clip:content-box;}
.padding-box(){-moz-background-clip:padding;background-clip:padding-box;}
.border-box(){-moz-background-clip:border;background-clip:border-box;}
.background-clip (padding){.padding-box;}
.background-clip (padding-box){.padding-box;}
.background-clip (border){.border-box;}
.background-clip (border-box){.border-box;}
.background-clip (content){.content-box;}
.background-clip (content-box){.content-box;}
.bg-clip(@arguments){.background-clip(@arguments);}

.box-shadow(@shadow1, @shadow2:X, ...){
	@shadows: ~`"@{arguments}".replace(/[\[\]]|\,\sX/g, '')`;
    -webkit-box-shadow: @shadows;
    -moz-box-shadow: @shadows;
    box-shadow: @shadows;
}

.border-radius-fix(){.background-clip(padding-box);}

.border-radius (@radius:5px, ...) {
	-webkit-border-radius: @arguments;
	-moz-border-radius: @arguments;
	border-radius: @arguments;
}
// Alternate name for .border-radius.
.round-corners (@radius:5px, ...) {.border-radius(@arguments);}

.elliptical-border-radius (@radius1, @radius2) {
	-webkit-border-radius: @radius1 ~"/" @radius2;
	-moz-border-radius: @radius1 ~"/" @radius2;
	border-radius: @radius1 ~"/" @radius2;
}
.round-corner (top-left, @radius...){
	-webkit-border-top-left-radius: @radius;
	-moz-border-top-left-radius: @radius;
	border-top-left-radius: @radius;
}
.round-corner (top-right, @radius...){
	-webkit-border-top-right-radius: @radius;
	-moz-border-top-right-radius: @radius;
	border-top-right-radius: @radius;
}
.round-corner (bottom-right, @radius...) {
	-webkit-border-bottom-right-radius: @radius;
	-moz-border-bottom-right-radius: @radius;
	border-bottom-right-radius: @radius;
}
.round-corner (bottom-left, @radius...) {
	-webkit-border-bottom-left-radius: @radius;
	-moz-border-bottom-left-radius: @radius;
	border-bottom-left-radius: @radius;
}
// Another methods to use corner radius.
.border-top-left-radius (...) {.round-corner(top-left,@arguments);}
.border-top-right-radius (...) {.round-corner(top-right,@arguments);}
.border-bottom-right-radius (...) {.round-corner(bottom-right,@arguments);}
.border-bottom-left-radius (...) {.round-corner(bottom-left,@arguments);}

// Round similar corners.
.border-top-radius (...) {.round-corner(top-left,@arguments);.round-corner(top-right,@arguments);}
.border-bottom-radius (...) {.round-corner(bottom-left,@arguments);.round-corner(bottom-right,@arguments);}
.border-left-radius (...) {.round-corner(top-left,@arguments);.round-corner(bottom-left,@arguments);}
.border-right-radius (...) {.round-corner(top-right,@arguments);.round-corner(bottom-right,@arguments);}

// Another classes for the same purpose as above.
.round-top-corners (...) {.border-top-radius(@arguments);}
.round-bottom-corners (...) {.border-bottom-radius(@arguments);}
.round-left-corners (...) {.border-left-radius(@arguments);}
.round-right-corners (...) {.border-right-radius(@arguments);}

.transparent() {.opacity(0);}
.non-transparent() {.opacity(1);}
.half-transparent () {.opacity(.5);}
.opacity () {.non-transparent();}
.opacity (@value) when (isnumber(@value)) and (@value =< 1){
	opacity: @value;
	filter: ~"alpha(opacity="@value*100~")";
	}
.opacity (@value) when (isnumber(@value)) and (@value > 1) and not (ispercentage(@value)){
	// INFO: for the explanation of rule "and not (ispercentage(@value))" refer to the class below.
	opacity: @value/100;
	filter: ~"alpha(opacity="@value~")";
	}
.opacity (@value) when (ispercentage(@value)) {
	// Change the @value from percentage to integer (XX% => XX)
	@integerValue: `parseInt('@{value}')`;
	// Actually the @value should be a number now... but it isn't.
	// LESS think of it as a string so we can't do math here.
	// We'll use a feature of LESS that automatically makes
	// a second value's unit in a sum to be the same as the first one.
	// In our case we need a number so we can divide it by 100.
	opacity: (0 + @integerValue) /100;
	// We don't need a math in filter so no trick.
	filter: ~"alpha(opacity="@integerValue~")";
	
	// BUG: WinLESS compile this with doubled properties unless the rule
	// "and not (ispercentage(@value))" is added in the class above.
	// In Firebug (through the LESS native compiler) those properties
	// aren't doubled, though.
}

.gradient (@color1, @color2){
	background-image: -moz-linear-gradient(top, @color1 0%, @color2 100%);
	background-image: -webkit-linear-gradient(top, @color1 0%,@color2 100%);
	background-image: linear-gradient(to bottom, @color1 0%,@color2 100%);
	filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='@{color1}', endColorstr='@{color2}',GradientType=0 );
}
.gradient (@color1, @color2, @color3){
	background-color: @color3;
	background-image: -moz-linear-gradient(top, @color1 0%, @color2 100%);
	background-image: -webkit-linear-gradient(top, @color1 0%,@color2 100%);
	background-image: linear-gradient(to bottom, @color1 0%,@color2 100%);
	filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='@{color1}', endColorstr='@{color2}',GradientType=0 );
}
// .vertical-gradient = .gradient
.vertical-gradient (@color1,@color2) {.gradient(@color1,@color2)}
.vertical-gradient (@color1,@color2,@color3) {.gradient(@color1,@color2,@color3)}
.horizontal-gradient (@color1, @color2) {
	background-image: -moz-linear-gradient(left, @color1 0%, @color2 100%);
	background-image: -webkit-linear-gradient(left, @color1 0%,@color2 100%);
	background-image: linear-gradient(to right, @color1 0%,@color2 100%);
	filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='@{color1}', endColorstr='@{color2}',GradientType=1 );
}
.horizontal-gradient (@color1, @color2, @color3) {
	background-color: @color3;
	background-image: -moz-linear-gradient(left, @color1 0%, @color2 100%);
	background-image: -webkit-linear-gradient(left, @color1 0%,@color2 100%);
	background-image: linear-gradient(to right, @color1 0%,@color2 100%);
	filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='@{color1}', endColorstr='@{color2}',GradientType=1 );
}
.diagonal-gradient (@color1, @color2) {
	background-image: -moz-linear-gradient(-45deg, @color1 0%, @color2 100%);
	background-image: -webkit-linear-gradient(-45deg, @color1 0%,@color2 100%);
	background-image: linear-gradient(135deg, @color1 0%,@color2 100%);
	filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='@{color1}', endColorstr='@{color2}',GradientType=1 );
	}
.diagonal-gradient (@color1, @color2, @color3) {
	background-color: @color3;
	background-image: -moz-linear-gradient(-45deg, @color1 0%, @color2 100%);
	background-image: -webkit-linear-gradient(-45deg, @color1 0%,@color2 100%);
	background-image: linear-gradient(135deg, @color1 0%,@color2 100%);
	filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='@{color1}', endColorstr='@{color2}',GradientType=1 );
	}
.radial-gradient (@color1, @color2) {
	background-image: -moz-radial-gradient(center, @color1 0%, @color2 100%);
	background-image: -webkit-radial-gradient(center, @color1 0%,@color2 100%);
	background-image: radial-gradient(at center, @color1 0%,@color2 100%);
	filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='@{color1}', endColorstr='@{color2}',GradientType=1 );
	}
.radial-gradient (@color1, @color2, @color3) {
	background-color: @color3;
	background-image: -moz-radial-gradient(center, @color1 0%, @color2 100%);
	background-image: -webkit-radial-gradient(center, @color1 0%,@color2 100%);
	background-image: radial-gradient(at center, @color1 0%,@color2 100%);
	filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='@{color1}', endColorstr='@{color2}',GradientType=1 );
}
 
.background-size (...) {
	-moz-background-size: @arguments;
	background-size: @arguments;
	}
// A shorthand class.
.bg-size (...) {.background-size(@arguments)}

.columns (...) {
	-webkit-columns: @arguments;
	-moz-columns: @arguments;
	columns: @arguments;
	}
.column-gap (@gap) {
	-webkit-column-gap: @gap;
	-moz-column-gap: @gap;
	column-gap: @gap;
	}
.columns-gap (@gap) {.column-gap(@gap);}
.column-rule (...) {
	-webkit-column-rule: @arguments;
	-moz-column-rule: @arguments;
	column-rule: @arguments;
	}
.columns-rule (...) {.column-rule(@arguments);}
.column-fill (@fill) {
	-webkit-column-fill: @fill;
	-moz-column-fill: @fill;
	column-fill: @fill;
}
.columns-fill (@fill) {.column-fill(@fill);}

.transform-origin (...) {
	-webkit-transform-origin: @arguments;
	-moz-transform-origin: @arguments;
	-ms-transform-origin: @arguments;
	transform-origin: @arguments;
}
.transform-style(@style) {
	-webkit-transform-style: preserve-3d;
	-o-transform-style: preserve-3d;
	transform-style: preserve-3d;
}
.perspective (@perspective) {
	-webkit-perspective: @perspective;
	perspective: @perspective;
}
.perspective-origin (...) {
	-webkit-perspective-origin: @arguments;
	perspective-origin: @arguments;
}
.backface-visibility(@visibility){
    -webkit-backface-visibility: @visibility;
    backface-visibility: @visibility;
}
.transform (...) {
	-webkit-transform: @arguments;
	-moz-transform: @arguments;
	-ms-transform: @arguments;
	transform: @arguments;
	}
.transform3d (...) {
	-webkit-transform: @arguments;
	transform: @arguments;
}
.transform-perspective (@perspective) {
	-webkit-transform: perspective(@perspective);
	transform: perspective(@perspective);
}
.rotate (@rotate) {
	-webkit-transform: rotate(@rotate);
	-moz-transform: rotate(@rotate);
	-ms-transform: rotate(@rotate);
	transform: rotate(@rotate);
	}
.rotate3d (@deg1, @deg2:0, @deg3:0){
	-webkit-transform: rotateX(@deg1) rotateY(@deg2) rotateZ(@deg3);
	transform: rotateX(@deg1) rotateY(@deg2) rotateZ(@deg3);
	}
.scale (@scale) {
	-webkit-transform: scale(@scale);
	-moz-transform: scale(@scale);
	-ms-transform: scale(@scale);
	transform: scale(@scale);
	}
.scale (@scale1,@scale2) {
	-webkit-transform: scale(@scale1,@scale2);
	-moz-transform: scale(@scale1,@scale2);
	-ms-transform: scale(@scale1,@scale2);
	transform: scale(@scale1,@scale2);
	}
.scaleX (@scale) {
	-webkit-transform: scaleX(@scale);
	-moz-transform: scaleX(@scale);
	-ms-transform: scaleX(@scale);
	transform: scaleX(@scale);
	}
.scaleY (@scale) {
	-webkit-transform: scaleY(@scale);
	-moz-transform: scaleY(@scale);
	-ms-transform: scaleY(@scale);
	transform: scaleY(@scale);
	}
.skew (@skew) {
	.skewX(@skew);
	}
.skew (@skew1, @skew2) {
	-webkit-transform: skewX(@skew1) skewY(@skew2);
	-moz-transform: skewX(@skew1) skewY(@skew2);
	-ms-transform: skewX(@skew1) skewY(@skew2);
	transform: skewX(@skew1) skewY(@skew2);
	}
.skewX (@skew) {
	-webkit-transform: skewX(@skew);
	-moz-transform: skewX(@skew);
	-ms-transform: skewX(@skew);
	transform: skewX(@skew);
	}
.skewY (@skew) {
	-webkit-transform: skewY(@skew);
	-moz-transform: skewY(@skew);
	-ms-transform: skewY(@skew);
	transform: skewY(@skew);
	}
.translate (@translate) {
	-webkit-transform: translate(@translate);
	-moz-transform: translate(@translate);
	-ms-transform: translate(@translate);
	transform: translate(@translate);
	}
.translate (@translate1, @translate2) {
	-webkit-transform: translate(@translate1, @translate2);
	-moz-transform: translate(@translate1, @translate2);
	-ms-transform: translate(@translate1, @translate2);
	transform: translate(@translate1, @translate2);
	}
.translateX (@translate) {
	-webkit-transform: translateX(@translate);
	-moz-transform: translateX(@translate);
	-ms-transform: translateX(@translate);
	transform: translateX(@translate);
	}
.translateY (@translate) {
	-webkit-transform: translateY(@translate);
	-moz-transform: translateY(@translate);
	-ms-transform: translateY(@translate);
	transform: translateY(@translate);
}

.transition(@transition1, @transition2:X, ...){
	@transitions: ~`"@{arguments}".replace(/[\[\]]|\,\sX/g, '')`;
    -webkit-transition: @transitions;
    transition: @transitions;
}
.transition-transform (@transformArguments1, @transformArguments2:X, ...) {
	@transformArguments: ~`"@{arguments}".replace(/[\[\]]|\,\sX/g, '')`;
	-webkit-transition: -webkit-transform @transformArguments;
	transition: transform @transformArguments;
}
.transition-property(@property1, @property2:X, ...) {
	@properties: ~`"@{arguments}".replace(/[\[\]]|\,\sX/g, '')`;
	-webkit-transition-property: @properties;
	transition-property: @@properties;
}
.transition-duration(@property1, @property2:X, ...) {
	@properties: ~`"@{arguments}".replace(/[\[\]]|\,\sX/g, '')`;
	-webkit-transition-duration: @properties;
	transition-duration: @properties;
}
.transition-timing-function(@property1, @property2:X, ...) {
	@properties: ~`"@{arguments}".replace(/[\[\]]|\,\sX/g, '')`;
	-webkit-transition-timing-function: @properties;
	transition-timing-function: @properties;
}
.transition-delay(@property1, @property2:X, ...) {
	@properties: ~`"@{arguments}".replace(/[\[\]]|\,\sX/g, '')`;
	-webkit-transition-delay: @properties;
	transition-delay: @properties;
}

.animation (...) {
	-webkit-animation: @arguments;
	animation: @arguments;
}
.animate (...) {.animation(@arguments);}
.anime (...) {.animation(@arguments);}
.animation-name(...) {
	-webkit-animation-name: @arguments;
	animation-name: @arguments;
}
.animation-duration(...) {
	-webkit-animation-duration: @arguments;
	animation-duration: @arguments;
}
.animation-timing-function(...) {
	-webkit-animation-timing-function: @arguments;
	animation-timing-function: @arguments;
}
.animation-delay(...) {
	-webkit-animation-delay: @arguments;
	animation-delay: @arguments;
}
.animation-iteration-count(...) {
	-webkit-animation-iteration-count: @arguments;
	animation-iteration-count: @arguments;
}
.animation-direction(...) {
	-webkit-animation-direction: @arguments;
	animation-direction: @arguments;
}
.animation-fill-mode(...) {
	-webkit-animation-fill-mode: @arguments;
	animation-fill-mode: @arguments;
}

.user-select (...) {
	-webkit-user-select: @arguments;
	-moz-user-select: @arguments;
	-ms-user-select: @arguments;
	user-select: @arguments;
}

.filter(@filter1, @filter2:X, ...) {
	@filters: ~`"@{arguments}".replace(/[\[\]]|\,\sX/g, '')`;
	-webkit-filter: @filters;
	-moz-filter: @filters;
	-ms-filter: @filters;
	filter: @filters;
}
.grayscale(@amount) {
	-webkit-filter: grayscale(@arguments);
	-moz-filter: grayscale(@arguments);
	-ms-filter: grayscale(@arguments);
	filter: grayscale(@arguments);
}
.sepia(@amount) {
	-webkit-filter: sepia(@arguments);
	-moz-filter: sepia(@arguments);
	-ms-filter: sepia(@arguments);
	filter: sepia(@arguments);
}
.saturate(@amount) {
	-webkit-filter: saturate(@arguments);
	-moz-filter: saturate(@arguments);
	-ms-filter: saturate(@arguments);
	filter: saturate(@arguments);
}
.hue-rotate(@angle) {
	-webkit-filter: hue-rotate(@arguments);
	-moz-filter: hue-rotate(@arguments);
	-ms-filter: hue-rotate(@arguments);
	filter: hue-rotate(@arguments);
}
.invert(@amount) {
	-webkit-filter: invert(@arguments);
	-moz-filter: invert(@arguments);
	-ms-filter: invert(@arguments);
	filter: invert(@arguments);
}
// .opacity() already taken, hence the -filter suffix.
.opacity-filter(@amount) {
	-webkit-filter: opacity(@arguments);
	-moz-filter: opacity(@arguments);
	-ms-filter: opacity(@arguments);
	filter: opacity(@arguments);
}
.brightness(@amount) {
	-webkit-filter: brightness(@arguments);
	-moz-filter: brightness(@arguments);
	-ms-filter: brightness(@arguments);
	filter: brightness(@arguments);
}
.contrast(@amount) {
	-webkit-filter: contrast(@arguments);
	-moz-filter: contrast(@arguments);
	-ms-filter: contrast(@arguments);
	filter: contrast(@arguments);
}
.blur(@radius) {
	-webkit-filter: blur(@arguments);
	-moz-filter: blur(@arguments);
	-ms-filter: blur(@arguments);
	filter: blur(@arguments);
}
.drop-shadow(@shadow) {
	-webkit-filter: drop-shadow(@arguments);
	-moz-filter: drop-shadow(@arguments);
	-ms-filter: drop-shadow(@arguments);
	filter: drop-shadow(@arguments);
}
.url(@url) {
	-webkit-filter: (@arguments);
	-moz-filter: (@arguments);
	-ms-filter: (@arguments);
	filter: @arguments;
}

.border-image(@url, @rest...) {
	-webkit-border-image:url(@url) @rest;
	-moz-border-image:url(@url) @rest;
	-o-border-image:url(@url) @rest;
	border-image:url(@url) @rest;
}
.border-image-source(@url) {
	-webkit-border-image-source: url(@url);
	-moz-border-image-source: url(@url);
	-o-border-image-source: url(@url);
	border-image-source: url(@url);
}
.border-image-slice(@slice) {
	-webkit-border-image-slice: @slice;
	-moz-border-image-slice: @slice;
	-o-border-image-slice: @slice;
	border-image-slice: @slice;
}
.border-image-width(@width) {
	-webkit-border-image-width: @width;
	-moz-border-image-width: @width;
	-o-border-image-width: @width;
	border-image-width: @width;
}
.border-image-outset(@outset) {
	-webkit-border-image-outset: @outset;
	-moz-border-image-outset: @outset;
	-o-border-image-outset: @outset;
	border-image-outset: @outset;
}
.border-image-repeat(@repeat) {
	-webkit-border-image-repeat: @repeat;
	-moz-border-image-repeat: @repeat;
	-o-border-image-repeat: @repeat;
	border-image-repeat: @repeat;
}

.display-flex() {
	display: -webkit-flex;
	display: flex;
}
.display-inline-flex(){
	display: -webkit-inline-flex;
	display: inline-flex;
}
.flex-direction(@direction) {
	-webkit-flex-direction: @direction;
	flex-direction: @direction;
}
.justify-content(@alignment) {
	-webkit-justify-content: @alignment;
	justify-content: @alignment;
}
.align-content(@alignment) {
	-webkit-align-content: @alignment;
	align-content: @alignment;
}
.align-items(@alignment) {
	-webkit-align-items: @alignment;
	align-items: @alignment;
}
.align-self(@alignment) {
	-webkit-align-self: @alignment;
	align-self: @alignment;
}
.flex(@arguments){
	-webkit-flex: @arguments;
	flex: @arguments;
}
.flex-basis(@basis) {
	-webkit-flex-basis: @basis;
	flex-basis: @basis;
}
.flex-grow(@grow) {
	-webkit-flex-grow: @grow;
	flex-grow: @grow;
}
.flex-shrink(@shrink) {
	-webkit-flex-shrink: @shrink;
	flex-shrink: @shrink;
}
.flex-flow(@arguments) {
	-webkit-flex-flow: @arguments;
	flex-flow: @arguments;
}
.flex-direction(@direction) {
	-webkit-flex-direction: @direction;
	flex-direction: @direction;
}
.flex-wrap(@wrap) {
	-webkit-flex-wrap: @wrap;
	flex-wrap: @wrap;
}
.order(@order) {
	-webkit-order: @order;
	order: @order;
}

.appearance (@appearance) {
    -webkit-appearance: @appearance;
    -moz-appearance: @appearance;
}

.selection(@text-color, @background-color) {
	&::-moz-selection {color: @text-color; background-color: @background-color;}
	&::selection {color: @text-color; background-color: @background-color;}
}

.hasLayout() {*zoom: 1;}


.ninja() {
	color: black;
	visibility: hidden;
}